# -*- coding: utf-8 -*-
"""MLP_multi_output_classifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FBvahoNF0ZJ0OEXaIeFXcfVmBYY1d_aO

## 1) Import packages
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import tensorflow as tf
from sklearn.preprocessing import LabelEncoder,normalize
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.layers import Input,Dense,Dropout
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import Adam
import keras

"""## 2) Loda data"""

from google.colab import drive
drive.mount("/content/drive/")
data_folder='drive/My Drive/data_for_workshop/'

# Read mRNA data
mrna_address = data_folder + 'mrna.csv'
mrna = pd.read_csv(mrna_address, index_col=0)
new_mrna = mrna.to_numpy().transpose()

# Read disease data and encode labels
disease_address = data_folder + 'disease.csv'
disease = pd.read_csv(disease_address, index_col=0).to_numpy()
new_disease = np.ravel(disease)
LabelEncoder_disease = LabelEncoder()
LabelEncoder_disease.fit(new_disease)
encoded_disease = LabelEncoder_disease.transform(new_disease)

# Read tissue data and encode labels
tissue_address = data_folder + 'tissue.csv'
tissue = pd.read_csv(tissue_address, index_col=0).to_numpy()
new_tissue = np.ravel(tissue)
LabelEncoder_tissue = LabelEncoder()
LabelEncoder_tissue.fit(new_tissue)
encoded_tissue = LabelEncoder_tissue.transform(new_tissue)

"""## 3) EDA"""

print('mRNA data shape:', mrna.shape)

# Describe dataframe
mrna.describe()

mrna.head()

# Data distribution
plt.figure(figsize=(10,6))
sns.boxplot(np.log2(mrna.iloc[:,:20]+1), palette='husl')
plt.xlabel('Sample')
plt.ylabel('Expression (log2)')
plt.title('Gene Expression before Normalization')
plt.show()

# Gene expression normalization across samples
new_mrna01 = normalize(mrna, axis=1, norm="max")
plt.figure(figsize=(10,6))
sns.boxplot(np.log2(new_mrna01[:,:20]+1), palette='husl')
plt.xlabel('Sample')
plt.ylabel('Expression (log2)')
plt.title('Gene Expression after Normalization')
plt.show()

# Distribution plot of genes across different samples
plt.figure(figsize=(10,6))
sns.kdeplot(data=np.log2(mrna.iloc[:,:10])+1)
plt.title('Gene Expression Distribution')
plt.xlabel('Expression')
plt.ylabel('Density')

ds_type, ds_count = np.unique(disease, return_counts=True)
ds_df = pd.DataFrame({'Disease': ds_type, 'Count':ds_count})
display(ds_df)
tissue_type, tissue_count = np.unique(tissue, return_counts=True)
tissue_df = pd.DataFrame({'Tissue': tissue_type, 'Count': tissue_count})
display(tissue_df)

# Describe dataframe
tissue_df.describe()
#color_palette = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467']
#plt.bar(tissue_type, tissue_count, color= color_palette)
sns.barplot(x='Tissue', y='Count', data=tissue_df, palette='husl', hue='Tissue')
plt.xlabel('Tissue')
plt.ylabel('Count')
plt.title('Tissue Distribution')
plt.show()

"""## 4) Prepare data for training"""

###### shuffle data
indices=np.arange(new_mrna.shape[0])
# shuffle samples' indices
np.random.shuffle(indices)
# Extract data with shuffled samples
shuffled_mrna=new_mrna[indices,:]
shuffled_disease=encoded_disease[indices]
shuffled_tissue=encoded_tissue[indices]

#split data into train, val and, test sets
# normalize gene expression data across samples
normalized_mrna=normalize(shuffled_mrna,axis=0,norm="max")
# Take 70% of data for training
train_mrna=normalized_mrna[0:int(.7*normalized_mrna.shape[0]),:]
# Take 10% of data for validation
val_mrna=normalized_mrna[int(0.7*normalized_mrna.shape[0]):int(.8*normalized_mrna.shape[0]),:]
# Take 20% of data for testing
test_mrna=normalized_mrna[int(.8*normalized_mrna.shape[0]):,:]

train_disease=shuffled_disease[0:int(.7*normalized_mrna.shape[0])]
val_disease=shuffled_disease[int(.7*normalized_mrna.shape[0]):int(.8*normalized_mrna.shape[0])]
test_disease=shuffled_disease[int(.8*normalized_mrna.shape[0]):]

train_tissue=shuffled_tissue[0:int(.7*normalized_mrna.shape[0])]
val_tissue=shuffled_tissue[int(.7*normalized_mrna.shape[0]):int(.8*normalized_mrna.shape[0])]
test_tissue=shuffled_tissue[int(.8*normalized_mrna.shape[0]):]

"""## 5) Build Model"""

# Build model

input_layer = Input(shape=(normalized_mrna.shape[1],), name="input")
dense_1 = Dense(units=1024, activation='relu', name='dense1')(input_layer)
drop_1 = Dropout(rate=0.2)(dense_1)
dense_2 = Dense(units=64, activation='relu', name='dense2')(drop_1)
disease_output = Dense(units=1, activation='sigmoid', name='disease_out')(dense_2)
tissue_output = Dense(units=4, activation='softmax', name='tissue_out')(dense_2)

# Define optimizer with a specific learning rate
learning_rate = 0.0001
optimizer = Adam(learning_rate=learning_rate)

classifier = Model(inputs=input_layer, outputs=[disease_output, tissue_output])
classifier.compile(optimizer=optimizer,
                   loss=[keras.losses.binary_crossentropy, keras.losses.categorical_crossentropy],
                   loss_weights=[0.5, 0.5],
                   metrics={'disease_out': 'accuracy', 'tissue_out': 'accuracy'})

# Summary of the model
classifier.summary()

# We can either split data into train, validation and test set manually or using the sklearn function
from sklearn.model_selection import train_test_split

# Split the original dataset into training+validation and test sets
train_mrna, test_mrna, train_disease, test_disease, train_tissue, test_tissue = train_test_split(normalized_mrna, shuffled_disease, shuffled_tissue,
            test_size=0.1, random_state=42)

# Function to reset the model's weights in each round of cross-validation
def reset_weights(model):
    for layer in model.layers:
        if hasattr(layer, 'kernel_initializer') and hasattr(layer, 'bias_initializer'):
            layer.kernel.assign(layer.kernel_initializer(tf.keras.backend.shape(layer.kernel)))
            layer.bias.assign(layer.bias_initializer(tf.keras.backend.shape(layer.bias)))


# K-fold cross-validation on train+val set
num_samples = train_mrna.shape[0]
list_num = list(range(num_samples))
num_fold = 3

histories = []

for i in range(num_fold):
    val_fold_mrna = train_mrna[int((i) * (num_samples / num_fold)):int((i + 1) * (num_samples / num_fold)), :]
    train_fold_mrna = np.delete(train_mrna, list_num[int((i) * (num_samples / num_fold)):int((i + 1) * (num_samples / num_fold))], axis=0)

    val_fold_disease = train_disease[int((i) * (num_samples / num_fold)):int((i + 1) * (num_samples / num_fold))]
    train_fold_disease = np.delete(train_disease, list_num[int((i) * (num_samples / num_fold)):int((i + 1) * (num_samples / num_fold))])

    val_fold_tissue = train_tissue[int((i) * (num_samples / num_fold)):int((i + 1) * (num_samples / num_fold))]
    train_fold_tissue = np.delete(train_tissue, list_num[int((i) * (num_samples / num_fold)):int((i + 1) * (num_samples / num_fold))], axis=0)

    # One-hot encode tissue labels
    train_fold_tissue = to_categorical(train_fold_tissue, num_classes=4)
    val_fold_tissue = to_categorical(val_fold_tissue, num_classes=4)

    print('fold:', i+1)
    # with open(data_folder + "real_disease.csv", "ab") as file:
    #     np.savetxt(file, val_fold_disease)

    # Reset the model's weights
    reset_weights(classifier)

    # Train the model and store the history
    history = classifier.fit(train_fold_mrna, [train_fold_disease, train_fold_tissue], epochs=30, batch_size=64, validation_data=(val_fold_mrna, [val_fold_disease, val_fold_tissue]), verbose=1)
    histories.append(history.history)

    classifier.evaluate(val_fold_mrna, [val_fold_disease, val_fold_tissue])
    predicted_disease = classifier.predict(val_fold_mrna)[0]

    # with open(data_folder + "predicted_disease.csv", "ab") as file:
    #     np.savetxt(file, predicted_disease)

# Plot the training and validation loss for each fold
plt.figure(figsize=(10, 6))
for i, history in enumerate(histories):
    plt.plot(history['loss'], label=f'Fold {i+1} Train Loss')
    plt.plot(history['val_loss'], '--', label=f'Fold {i+1} Val Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.title('Training and Validation Loss for Each Fold')
plt.legend()
plt.show()

# Final evaluation on the test set
test_tissue = to_categorical(test_tissue, num_classes=4)
test_eval = classifier.evaluate(test_mrna, [test_disease, test_tissue])
print("Test evaluation:", test_eval)

#### Plot and summary of model
tf.keras.utils.plot_model(classifier, to_file='model_plot.png', show_shapes=True, show_layer_names=True)
classifier.summary()

# Train the model
learn_history = classifier.fit(train_mrna, [train_disease, train_tissue], epochs=30, batch_size=64, validation_data=(val_mrna, [val_disease, val_tissue]))

### Plot loss
import matplotlib.pyplot as plt
plt.plot(learn_history.history['loss'], 'b')
plt.plot(learn_history.history['val_loss'], 'bo')
plt.legend(['train', 'val'], loc='lower right')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.title('Training and Validation Loss')
plt.show()

classifier.summary()

predicted_ds=pd.read_csv(data_folder+"predicted_disease.csv",header=None)
true_ds=pd.read_csv(data_folder+"true_disease.csv",header=None)
y=(predicted_ds>0.5)

from sklearn.metrics import confusion_matrix
confusion_matrix(true_ds,y)

len(classifier.predict(test_mrna))

classifier.predict(test_mrna)[0].shape

# Tissue prediction results
classifier.predict(test_mrna)[1]

from tensorflow.keras.applications import InceptionV3

learn_history.history.keys()

learn_history.history['loss']

import tensorflow as tf
tf.keras.utils.plot_model(classifier)

import tensorflow as tf
tf.keras.utils.plot_model(classifier)
